name: Publish to NPM

on:
  push:
    branches:
      - main  # Triggers when PRs are merged to main
  workflow_dispatch:  # Allows manual triggering

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Fetch full history for version calculation

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@anadi45'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      # Automatic version bumping is disabled - rely on manual version updates
      # - name: Check if version was manually updated
      #   id: manual_version_check
      #   run: |
      #     cd create-package
      #     
      #     # Get current version
      #     CURRENT_VERSION=$(node -p "require('./package.json').version")
      #     echo "Current version: $CURRENT_VERSION"
      #     
      #     # Check if version was manually updated by looking at recent commits
      #     # Look for commits that mention version changes
      #     if git log --oneline -10 | grep -q "version\|bump\|release"; then
      #       echo "Version appears to be manually updated, skipping automatic version bump"
      #       echo "is_manual_update=true" >> $GITHUB_OUTPUT
      #       echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      #     else
      #       echo "No manual version update detected, proceeding with automatic version bump"
      #       echo "is_manual_update=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Determine version bump
      #   id: version
      #   if: steps.manual_version_check.outputs.is_manual_update == 'false'
      #   run: |
      #     cd create-package
      #     
      #     # Get current version
      #     CURRENT_VERSION=$(node -p "require('./package.json').version")
      #     echo "Current version: $CURRENT_VERSION"
      #     
      #     # Check commit messages since last release to determine bump type
      #     LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
      #     
      #     if [ -z "$LAST_TAG" ]; then
      #       # No previous tags, this is the first release
      #       BUMP_TYPE="minor"
      #       echo "First release, using minor bump"
      #     else
      #       # Get commits since last tag
      #       COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
      #       echo "Commits since ${LAST_TAG}:"
      #       echo "$COMMITS"
      #       
      #       # Determine bump type based on commit messages
      #       if echo "$COMMITS" | grep -q "BREAKING CHANGE\|^feat!:\|^fix!:\|^chore!:"; then
      #         BUMP_TYPE="major"
      #       elif echo "$COMMITS" | grep -q "^feat:"; then
      #         BUMP_TYPE="minor"
      #       elif echo "$COMMITS" | grep -q "^fix:\|^docs:\|^style:\|^refactor:\|^perf:\|^test:\|^chore:"; then
      #         BUMP_TYPE="patch"
      #       else
      #         # Default to patch if no conventional commit format
      #         BUMP_TYPE="patch"
      #       fi
      #     fi
      #     
      #     echo "Determined bump type: $BUMP_TYPE"
      #     echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
      #     
      #     # Calculate new version
      #     NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version | sed 's/^v//')
      #     echo "New version: $NEW_VERSION"
      #     echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version was manually updated
        id: version_check
        run: |
          cd create-package
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if version was manually updated by looking at recent commits
          # Look for commits that mention version changes
          if git log --oneline -10 | grep -q "version\|bump\|release"; then
            echo "Manual version update detected, proceeding with publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No manual version update detected, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          cd create-package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to GitHub Packages
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          cd create-package
          # Update package.json to use GitHub packages scope
          npm pkg set name="@anadi45/nest-react-monorepo"
          npm pkg set publishConfig.registry="https://npm.pkg.github.com"
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag and push
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Manual version update - just create tag, no commit needed
          echo "Creating tag for manually updated version: v${{ steps.version_check.outputs.new_version }}"
          git tag -a "v${{ steps.version_check.outputs.new_version }}" -m "Release v${{ steps.version_check.outputs.new_version }}"
          git push origin "v${{ steps.version_check.outputs.new_version }}"

      - name: Generate changelog
        if: steps.version_check.outputs.should_publish == 'true'
        id: changelog
        run: |
          # Get commits for changelog
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse HEAD~10..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse ${LAST_TAG}..HEAD~1)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed in v${{ steps.version_check.outputs.new_version }}
          
          $COMMITS
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version_check.outputs.should_publish == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_check.outputs.new_version }}
          name: Release v${{ steps.version_check.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}