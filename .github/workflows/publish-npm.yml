name: Publish to NPM

on:
  push:
    branches:
      - main  # Triggers when PRs are merged to main
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (root)
        run: npm ci

      - name: Install dependencies (create-package)
        run: |
          cd create-package
          npm ci

      - name: Run tests
        run: npm test

      - name: Test create-package CLI
        run: |
          cd create-package
          npm run build
          # Test CLI in a temporary directory
          cd /tmp
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-project --no-install
          # Verify the project was created correctly
          test -d test-project/client
          test -d test-project/server
          test -f test-project/package.json
          test -f test-project/nx.json

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies (create-package)
        run: |
          cd create-package
          npm ci

      - name: Clean template directory
        run: |
          rm -rf create-package/template

      - name: Build template
        run: |
          cd create-package
          npm run build

      - name: Determine version bump
        id: version
        run: |
          cd create-package
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check commit messages since last release to determine bump type
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # No previous tags, this is the first release
            BUMP_TYPE="minor"
            echo "First release, using minor bump"
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
            echo "Commits since ${LAST_TAG}:"
            echo "$COMMITS"
            
            # Determine bump type based on commit messages
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|^feat!:\|^fix!:\|^chore!:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat:"; then
              BUMP_TYPE="minor"
            elif echo "$COMMITS" | grep -q "^fix:\|^docs:\|^style:\|^refactor:\|^perf:\|^test:\|^chore:"; then
              BUMP_TYPE="patch"
            else
              # Default to patch if no conventional commit format
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Determined bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate new version
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version | sed 's/^v//')
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: version_check
        run: |
          cd create-package
          if git diff --quiet package.json; then
            echo "No version change needed, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed, proceeding with publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          cd create-package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add create-package/package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Generate changelog
        if: steps.version_check.outputs.should_publish == 'true'
        id: changelog
        run: |
          # Get commits for changelog
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse HEAD~10..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse ${LAST_TAG}..HEAD~1)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed in v${{ steps.version.outputs.new_version }}
          
          $COMMITS
          
          ### 🚀 Quick Start
          \`\`\`bash
          npx create-nest-react-monorepo my-awesome-app
          cd my-awesome-app  
          npm run dev
          \`\`\`
          
          ### ✨ Features
          - ⚡ NestJS backend with TypeScript
          - ⚛️ React frontend with TypeScript and Vite
          - 🏗️ Nx monorepo architecture  
          - 🐳 Docker support (development & production)
          - 🧪 Jest testing setup
          - 🔧 ESLint configuration
          - 🚀 Hot reload development
          
          ### 📦 Installation
          \`\`\`bash
          npx create-nest-react-monorepo my-project
          cd my-project
          npm run dev
          \`\`\`
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version_check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
