name: Test Suite

on:
  pull_request:
    branches: [ main ]

jobs:
  test-cli-tool:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        package-manager: [npm, yarn, pnpm]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ matrix.package-manager }}
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      - name: Test CLI tool with ${{ matrix.package-manager }}
        run: |
          # Test CLI tool creation with different package managers
          cd /tmp
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-cli-${{ matrix.package-manager }} --no-install --yes
          
          # Verify project structure
          test -d test-cli-${{ matrix.package-manager }}/client && echo "✅ Client directory exists" || (echo "❌ Client directory should exist" && exit 1)
          test -d test-cli-${{ matrix.package-manager }}/server && echo "✅ Server directory exists" || (echo "❌ Server directory should exist" && exit 1)
          test -f test-cli-${{ matrix.package-manager }}/package.json && echo "✅ Root package.json exists" || (echo "❌ Root package.json should exist" && exit 1)
          test -f test-cli-${{ matrix.package-manager }}/nx.json && echo "✅ Nx config exists" || (echo "❌ Nx config should exist" && exit 1)
          
          echo "✅ CLI tool test passed for ${{ matrix.package-manager }}!"

      - name: Test generated project with ${{ matrix.package-manager }}
        run: |
          cd /tmp/test-cli-${{ matrix.package-manager }}
          
          # Install dependencies
          if [ "${{ matrix.package-manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ matrix.package-manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          fi
          
          # Test that the generated project can build
          npm run build:server
          npm run build:client
          
          # Test that tests can run
          npm run test:server
          npm run test:client
          
          echo "✅ Generated project test passed for ${{ matrix.package-manager }}!"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/test-cli-*

  test-cli-options:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      - name: Test CLI with different options
        run: |
          cd /tmp
          
          # Test with Vite bundler
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-vite --no-install --yes
          test -f test-vite/client/vite.config.ts && echo "✅ Vite config exists" || (echo "❌ Vite config should exist" && exit 1)
          
          # Test with Webpack bundler
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-webpack --no-install --yes
          test -f test-webpack/client/webpack.config.js && echo "✅ Webpack config exists" || (echo "❌ Webpack config should exist" && exit 1)
          
          # Test with Docker enabled
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-docker --no-install --yes
          test -f test-docker/docker-compose.yml && echo "✅ Docker compose exists" || (echo "❌ Docker compose should exist" && exit 1)
          test -f test-docker/client/Dockerfile && echo "✅ Client Dockerfile exists" || (echo "❌ Client Dockerfile should exist" && exit 1)
          test -f test-docker/server/Dockerfile && echo "✅ Server Dockerfile exists" || (echo "❌ Server Dockerfile should exist" && exit 1)
          
          echo "✅ CLI options test passed!"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/test-*

  test-cli-interactive:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      - name: Test CLI help and version
        run: |
          # Test help command
          node $GITHUB_WORKSPACE/create-package/bin/cli.js --help
          
          # Test version command
          node $GITHUB_WORKSPACE/create-package/bin/cli.js --version
          
          echo "✅ CLI help and version test passed!"

  test-error-handling:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      - name: Test error handling
        run: |
          cd /tmp
          
          # Test with existing directory (should fail)
          mkdir existing-dir
          if node $GITHUB_WORKSPACE/create-package/bin/cli.js existing-dir --no-install --yes; then
            echo "❌ Should have failed with existing directory"
            exit 1
          fi
          
          # Test with invalid project name (should fail)
          if node $GITHUB_WORKSPACE/create-package/bin/cli.js "Invalid Name!" --no-install --yes; then
            echo "❌ Should have failed with invalid project name"
            exit 1
          fi
          
          echo "✅ Error handling test passed!"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/existing-dir

  # Comprehensive tests that run on PRs to main
  comprehensive-pr-tests:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    needs: [test-cli-tool, test-cli-options, test-cli-interactive, test-error-handling]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'create-package/package-lock.json'

      - name: Install dependencies
        run: |
          cd create-package
          npm ci

      - name: Test CLI with different options
        run: |
          cd /tmp
          
          # Test with Vite bundler
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-vite --no-install --yes
          test -f test-vite/client/vite.config.ts && echo "✅ Vite config exists" || (echo "❌ Vite config should exist" && exit 1)
          
          # Test with Webpack bundler
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-webpack --no-install --yes
          test -f test-webpack/client/webpack.config.js && echo "✅ Webpack config exists" || (echo "❌ Webpack config should exist" && exit 1)
          
          # Test with Docker enabled
          node $GITHUB_WORKSPACE/create-package/bin/cli.js test-docker --no-install --yes
          test -f test-docker/docker-compose.yml && echo "✅ Docker compose exists" || (echo "❌ Docker compose should exist" && exit 1)
          test -f test-docker/client/Dockerfile && echo "✅ Client Dockerfile exists" || (echo "❌ Client Dockerfile should exist" && exit 1)
          test -f test-docker/server/Dockerfile && echo "✅ Server Dockerfile exists" || (echo "❌ Server Dockerfile should exist" && exit 1)
          
          echo "✅ CLI options test passed!"

      - name: Test CLI help and version
        run: |
          # Test help command
          node $GITHUB_WORKSPACE/create-package/bin/cli.js --help
          
          # Test version command
          node $GITHUB_WORKSPACE/create-package/bin/cli.js --version
          
          echo "✅ CLI help and version test passed!"

      - name: Test error handling
        run: |
          cd /tmp
          
          # Test with existing directory (should fail)
          mkdir existing-dir
          if node $GITHUB_WORKSPACE/create-package/bin/cli.js existing-dir --no-install --yes; then
            echo "❌ Should have failed with existing directory"
            exit 1
          fi
          
          # Test with invalid project name (should fail)
          if node $GITHUB_WORKSPACE/create-package/bin/cli.js "Invalid Name!" --no-install --yes; then
            echo "❌ Should have failed with invalid project name"
            exit 1
          fi
          
          echo "✅ Error handling test passed!"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/test-* /tmp/existing-dir